# -*- coding: utf-8 -*-
"""
Created on Fri Feb 14 12:35:35 2020

@author: d06939tn
"""
import numpy as np
import matplotlib.pyplot as plt
import math as m


def search(arr, x):
    for i in range(len(arr)):
        if arr[i] == x:
            return i
    return -1


def extractPeaks(x, array, n):
    # n is the expected number of peaks
    peaks = []
    dips = []
    for counter in range(0, n, 1):
        maximumIndex = search(array, np.max(array))
        peaks.append([x[maximumIndex], np.max(array)])
        minimumIndex = search(array, np.min(array))
        dips.append([x[minimumIndex], np.min(array)])
        array = np.delete(array, minimumIndex)
        array = np.delete(array, maximumIndex)

    return [peaks, dips, array]


x = [201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213,
     214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226,
     227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239,
     240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252,
     253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
     266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
     279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291,
     292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304,
     305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317,
     318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330,
     331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343,
     344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356,
     357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369,
     370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382,
     383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395,
     396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408,
     409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421,
     422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434,
     435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447,
     448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460,
     461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473,
     474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486,
     487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499,
     500]
array = np.array([4.9833, 4.9952, 4.9904, 4.9833, 4.9689, 4.9761, 4.9857, 5.0024,
                  5.0048, 4.9928, 4.9833, 4.9952, 5.0048, 4.9952, 4.9809, 4.9737,
                  4.9713, 5.0096, 4.9713, 5., 4.9737, 4.9857, 4.9761, 4.9737,
                  4.9642, 4.9642, 5., 4.9904, 4.9952, 5.0024, 4.9976, 5.,
                  4.9952, 4.9618, 4.957, 4.9594, 4.9618, 4.9833, 4.9737, 4.9737,
                  4.9689, 4.9666, 4.9451, 4.9427, 4.9666, 4.9737, 4.9666, 4.9642,
                  4.9498, 4.9522, 4.9642, 4.9666, 4.9857, 4.9522, 4.9594, 4.957,
                  4.9761, 4.9785, 4.9761, 4.9833, 4.9666, 4.9809, 4.9761, 4.9952,
                  4.9833, 4.9666, 4.9737, 4.9522, 4.9403, 4.9522, 4.9522, 4.9379,
                  4.9355, 4.9474, 4.9403, 4.9307, 4.914, 4.8997, 4.8734, 4.8328,
                  4.7563, 4.6918, 4.6273, 4.625, 4.6656, 4.7731, 4.9331, 5.0979,
                  5.2222, 5.3105, 5.3177, 5.2962, 5.2604, 5.1338, 5.0741, 5.0382,
                  5.0119, 4.9904, 4.9761, 4.9857, 4.9689, 4.9833, 5.0048, 4.9785,
                  4.9666, 4.9594, 4.9522, 4.9522, 4.9451, 4.9403, 4.9594, 4.9689,
                  4.9785, 4.957, 4.9642, 4.9713, 4.9809, 4.9785, 4.9881, 4.9904,
                  4.9713, 4.9666, 4.9713, 4.9761, 4.9761, 4.9546, 4.9498, 4.9642,
                  4.9737, 4.9642, 4.9451, 4.9283, 4.9355, 4.9618, 4.9761, 4.9809,
                  4.9713, 4.9761, 4.9881, 5.0024, 4.9904, 4.9976, 5.0048, 4.9952,
                  4.9904, 4.9737, 4.9881, 4.9809, 4.9833, 4.9857, 4.9666, 4.9666,
                  4.9713, 4.9713, 4.9498, 4.9451, 4.9546, 4.9427, 4.9666, 4.9618,
                  4.9785, 4.9546, 4.9666, 4.9761, 4.9737, 4.9713, 4.9785, 4.9618,
                  4.9522, 4.9761, 4.9976, 4.9904, 4.9857, 4.9952, 4.9833, 4.9689,
                  4.9642, 4.9713, 4.9713, 4.9498, 4.9522, 4.957, 4.957, 4.9451,
                  4.9427, 4.9427, 4.957, 4.9594, 4.9355, 4.9355, 4.9403, 4.9427,
                  4.9379, 4.9498, 4.9666, 4.9403, 4.9761, 4.9785, 4.9618, 4.9761,
                  4.9881, 4.9976, 4.9833, 4.9761, 4.9809, 4.9809, 4.9904, 4.9761,
                  4.9594, 4.9594, 4.957, 4.9642, 4.9713, 4.9666, 4.9833, 4.9928,
                  4.9666, 4.9522, 4.9522, 4.9689, 4.9785, 4.9666, 4.9594, 4.9785,
                  4.9761, 4.9737, 4.9809, 4.9761, 4.9761, 4.9857, 4.9809, 4.9713,
                  4.9904, 4.9904, 4.9785, 4.9618, 4.9522, 4.9307, 4.9355, 4.9403,
                  4.9498, 5.0024, 5.043, 5.043, 5.0263, 5.0191, 5.0143, 5.,
                  4.9809, 4.9857, 4.9928, 5.0024, 4.9904, 4.9666, 4.9594, 4.9881,
                  4.9881, 4.9857, 4.9976, 5.0024, 4.9928, 4.9904, 4.9881, 4.9952,
                  5., 4.9976, 4.9904, 5.0024, 5., 5.0048, 5.0024, 5.,
                  5.0024, 4.9809, 4.9689, 4.9976, 5.0239, 5.0167, 4.9881, 4.9761,
                  4.9881, 5.0119, 5.0119, 5., 5.0143, 5.0167, 5.0024, 5.0167,
                  5.0096, 4.9952, 4.9881, 5., 5.0096, 5.0334, 5.0167, 5.0143,
                  5.0096, 5.0167, 5.0024, 5.0096])
x = np.array(x)
array = array - 5
plt.plot(x, array)
plt.plot(x, array)
#

temp = np.min(array)
index2 = search(array, temp)
minimum = [x[index2], temp]

temp = np.max(array)
index1 = search(array, temp)
maximum = [x[index1], temp]

cut_array = array[index2:index1]
x_temp = x[index2:index1]

plt.plot(x_temp, cut_array)

temp = np.linspace(x_temp[0], x_temp[len(x_temp) - 1], 100)
interpolated_y = np.interp(temp, x_temp, cut_array)

fitted_parameters = np.polyfit(temp, interpolated_y, 1)
zero = -1 * fitted_parameters[1] / fitted_parameters[0]
plt.plot(temp, fitted_parameters[0] * temp + fitted_parameters[1], "g")
print(zero)

zero = np.rint(zero)
zero = int(zero)

plt.plot(zero, , "or")
print(zero)
plt.plot(x,x*0)

#


plt.show()
